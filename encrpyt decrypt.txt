#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

char cipherText[100];
char decipherText[100];

/* One-time pad encryption. Accepts a message and key comprised of ASCII numbers
65-90 and 32. Returns a string of cipher text. */
char* encrypt(char* message, char* key){
    // key must be as long as the message to encrypt
    if(strlen(key)<strlen(message)){
        fprintf(stderr, "Key length too short.");
        exit(1); 
    }
    
    char *e, *p;
    int messageNum, keyNum;
    char characters[27] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ";
    
    for(int i=0; i<strlen(message); i++){
        // get the index position of the message element in characters array
        e = strchr(characters, message[i]);
        messageNum = (int)(e - characters);
        // get the index position of the key element in characters array
        p = strchr(characters, key[i]);
        keyNum = (int)(p - characters);
        
        
        // add the key to the message using modular arithmetic to 
        // encrypt the current element
        if(messageNum+keyNum <= 26){
            cipherText[i] = characters[messageNum+keyNum];
            // printf("msg: %d key: %d cipher %d\n", messageNum, keyNum, messageNum+keyNum);
        }else{
            cipherText[i] = characters[messageNum+keyNum-27];
            // printf("msg: %d key: %d cipher %d\n", messageNum, keyNum, messageNum+keyNum-27);
        }
    }
    return cipherText;
}

/* One-time pad decryption. Accepts a message and key comprised of ASCII numbers
65-90 and 32. Returns the decrypted message provided the same key used for 
encryption is passed. */
char* decrypt(char* cipher, char* key){
    // key must be as long as the cipher to decrypt
    if(strlen(key)<strlen(cipher)){
        fprintf(stderr, "Key length too short.");
        exit(1); 
    }

    char *e, *p;
    int cipherNum, keyNum;
    char characters[27] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ";
    
    // decrypt each element of the cipher text
    for(int i=0; i<strlen(cipher); i++){
        // get the index position of the cipher element in characters array
        e = strchr(characters, cipher[i]);
        cipherNum = (int)(e - characters);
        // get the index position of the key element in characters array
        p = strchr(characters, key[i]);
        keyNum = (int)(p - characters);
        
        // subtract the key from the cipher using modular arithmetic to 
        // decipher the current element
        if(cipherNum-keyNum >= 0){
            decipherText[i] = characters[cipherNum-keyNum];
        }else{
            decipherText[i] = characters[cipherNum-keyNum+27];
        }
    }
    return decipherText;
}

int main(int argc, char *argv[]){
    char* message = "HELLO AGAIN ANOTHER TEST THIS TIME ZLONGER";
    char *key = "X MCKLABCDEERTURI IRU TIRHG UUHTIU REIFNOIESNIOI EIRE";
    
    printf("Message text: %s\n", message);
    char* cipherText = encrypt(message, key);
    printf("Cipher text: %s\n", cipherText);
    char* decipherText = decrypt(cipherText, key);
    printf("Decipher text: %s\n", decipherText);

	return 0;
}